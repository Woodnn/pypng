Help on module png:

NAME
    png - PNG encoder in pure Python

FILE
    /home/johann/v03/pypng/lib/png.py

DESCRIPTION
    This is an implementation of a subset of the PNG specification at
    http://www.w3.org/TR/2003/REC-PNG-20031110 in pure Python.
    
    It currently supports encoding of PPM files or raw data with 24 bits
    per pixel (RGB) into PNG, with a number of options.
    
    This file can be used in two ways:
    
    1. As a command-line utility to convert PNM files to PNG. The
       interface is similar to that of the pnmtopng program from the
       netpbm package. Try "python png.py --help" for usage information.
    
    2. As a module that can be imported and that offers methods to write
       PNG files directly from your Python program. For help, try the
       following in your python interpreter:
       >>> import png
       >>> help(png)
    
    Changelog (recent first):
    2006-06-17 Alpha-channel, grey-scale, 16-bit/plane support and test
               suite added by Nicko van Someren <nicko@nicko.org>
    2006-06-15 Scanline iterator interface to avoid storing the whole
               input data in memory
    2006-06-09 Very simple prototype implementation

FUNCTIONS
    array_scanlines(pixels, width, height, psize)
        Generator for scanlines from an array.
    
    array_scanlines_interlace(pixels, width, height, psize)
        Generator for interlaced scanlines from an array.
        http://www.w3.org/TR/PNG/#8InterlaceMethods
    
    color_triple(color)
        Convert a command line color value to a RGB triple of integers.
    
    file_scanlines(infile, width, height, psize)
        Generator for scanlines from an input file.
    
    interleave_planes(ipixels, apixels, width, height, ipsize, apsize)
        Interleave color planes, e.g. RGB + A = RGBA.
    
    pnmtopng(infile, outfile, interlace=None, transparent=None, background=None, alpha=None, gamma=None, compression=None)
        Encode a PNM file into a PNG file.
    
    read_pnm_header(infile, supported='P6')
        Read a PNM header, return width and height of the image in pixels.
    
    test_suite()
        Run regression tests and produce PNG files in current directory.
    
    write(outfile, scanlines, width, height, interlaced=False, transparent=None, background=None, gamma=None, compression=None, chunk_limit=1048576, greyscale=False, hasalpha=False, bytespersample=1)
        Create a PNG image from RGB data.
        
        Arguments:
        outfile - something with a write() method
        scanlines - iterator that returns scanlines from top to bottom
        width, height - size of the image in pixels
        interlaced - scanlines are interlaced with Adam7
        transparent - create a tRNS chunk
        compression - zlib compression level (0-9)
        
        Each scanline must be an array of bytes of length 3*width,
        containing the red, green, blue values for each pixel.
        
        If the interlaced parameter is set to True, the scanlines are
        expected to be interlaced with the Adam7 scheme. This is good for
        incremental display over a slow network connection, but it
        increases encoding time and memory use by an order of magnitude
        and output file size by a factor of 1.2 or so.
        
        The transparent parameter can be used to mark a color as
        transparent in the resulting image file. If specified, it must be
        a tuple with three integer values for red, green, blue.
    
    write_chunk(outfile, tag, data)
        Write a PNG chunk to the output file, including length and checksum.
        http://www.w3.org/TR/PNG/#5Chunk-layout

DATA
    __author__ = '$Author: johann $'
    __date__ = '$Date: 2006-06-17 10:51:15 +0200 (Sat, 17 Jun 2006) $'
    __revision__ = '$Rev: 507 $'

DATE
    $Date: 2006-06-17 10:51:15 +0200 (Sat, 17 Jun 2006) $

AUTHOR
    $Author: johann $


